{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","characters","map","character","index","key","name","job","onClick","removeCharacter","Table","Form","handleChange","e","target","value","setState","submitForm","preventDefault","handleSubmit","state","onSubmit","this","htmlFor","type","id","onChange","Component","App","filter","i","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAaMA,G,MAAc,WAClB,OACE,+BACE,4BACE,oCACA,uCAMFC,EAAY,SAAAC,GAChB,OAAOA,EAAMC,WAAWC,KAAI,SAACC,EAAWC,GAAZ,OAC1B,+BACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAUG,MACf,4BAAKH,EAAUI,KACf,4BACE,4BAAQC,QAAS,kBAAMR,EAAMS,gBAAgBL,KAA7C,iBAMKM,EAnCD,SAAAV,GAAU,IACdC,EAAgCD,EAAhCC,WAAYQ,EAAoBT,EAApBS,gBAEpB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,WAAYA,EAAYQ,gBAAiBA,M,OCuC3CE,E,YA5Cb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAORY,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAlBR,EADU,EACVA,KAAMS,EADI,EACJA,MACd,EAAKC,SAAL,eAAiBV,EAAOS,KAVP,EAanBE,WAAa,SAAAJ,GACXA,EAAEK,iBACF,EAAKlB,MAAMmB,aAAa,EAAKC,OAC7B,EAAKJ,SAAS,CAAEV,KAAM,GAAIC,IAAK,MAd/B,EAAKa,MAAQ,CACXd,KAAM,GACNC,IAAK,IAJU,E,sEAoBjB,OACE,0BAAMc,SAAUC,KAAKL,YACnB,2BAAOM,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLlB,KAAK,OACLmB,GAAG,OACHV,MAAOO,KAAKF,MAAMd,KAClBoB,SAAUJ,KAAKV,eAEjB,2BAAOW,QAAQ,OAAf,OACA,2BACEC,KAAK,OACLlB,KAAK,MACLmB,GAAG,MACHV,MAAOO,KAAKF,MAAMb,IAClBmB,SAAUJ,KAAKV,eAEjB,+C,GAvCWe,aCkCJC,EA/Bf,2MACER,MAAQ,CACNnB,WAAY,IAFhB,EAKEQ,gBAAkB,SAAAL,GAAU,IAClBH,EAAe,EAAKmB,MAApBnB,WACR,EAAKe,SAAS,CACZf,WAAYA,EAAW4B,QAAO,SAAC1B,EAAW2B,GACxC,OAAOA,IAAM1B,QATrB,EAcEe,aAAe,SAAAhB,GACb,EAAKa,SAAS,CAAEf,WAAW,GAAD,mBAAM,EAAKmB,MAAMnB,YAAjB,CAA6BE,OAf3D,wEAmBI,OACE,yBAAK4B,UAAU,aACb,kBAAC,EAAD,CACE9B,WAAYqB,KAAKF,MAAMnB,WACvBQ,gBAAiBa,KAAKb,kBAExB,kBAAC,EAAD,CAAMU,aAAcG,KAAKH,oBAzBjC,GAAyBQ,aCOLK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b1547d6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst Table = props => {\n  const { characters, removeCharacter } = props;\n\n  return (\n    <table>\n      <TableHeader />\n      <TableBody characters={characters} removeCharacter={removeCharacter} />\n    </table>\n  );\n};\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n      </tr>\n    </thead>\n  );\n};\n\nconst TableBody = props => {\n  return props.characters.map((character, index) => (\n    <tbody>\n      <tr key={index}>\n        <td>{character.name}</td>\n        <td>{character.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    </tbody>\n  ));\n};\nexport default Table;\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      job: \"\"\n    };\n  }\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  submitForm = e => {\n    e.preventDefault();\n    this.props.handleSubmit(this.state);\n    this.setState({ name: \"\", job: \"\" });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.submitForm}>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={this.state.job}\n          onChange={this.handleChange}\n        />\n        <button>Submit</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\nexport class App extends Component {\n  state = {\n    characters: []\n  };\n\n  removeCharacter = index => {\n    const { characters } = this.state;\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      })\n    });\n  };\n\n  handleSubmit = character => {\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Table\n          characters={this.state.characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}